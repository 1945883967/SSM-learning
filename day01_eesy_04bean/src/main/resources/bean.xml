<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交个spring来管理-->
    <!--spring对bean的管理细节：
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--创建bean的三种方式，-->
    <!--第一种方式：使用默认构造函数创建
            在spring的配置文件中使用bean标签，配以ID和calss属性之后，且没有其他属性和标签时，
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认的构造函数，则无法创建对象。
            <bean id="accountService" class="com.minghai.service.impl.AccountServiceImpl"> </bean>
    -->
    <!--第二种方式：使用普通工厂中的方法创建对象（只用某个类中的方法创建对象，并存入spring容器）
    <bean id="instancefactory" class="com.minghai.factory.instancefactory"></bean>
    <bean id="accountService" factory-bean="instancefactory" factory-method="getAccountService"></bean>
    -->
    <!--第三种方法：使用工程中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
    <bean id="accountService" class="com.minghai.factory.Staticfactory" factory-method="getAccountService"></bean>
    -->
    <!--bean的作用范围的调整
            bean标签的scope的作用
            取值  常用的是单例和多例的
                singleton:单例的（默认值）
                prototype:多例的
                request：作用于web应用的请求范围
                session:作用于web应用的会话范围
                global-session:作用于集群化境的会话范围（全局会话范围），当然是集群环境，它就是session

     <bean id="accountService" class="com.minghai.service.impl.AccountServiceImpl" scope="prototype"> </bean>
    -->
    <!--bean对象的生命周期
        单例对象：
            出生：当容器创建时对象出生
            活着：容器还在对象一直活着
            死亡：容器销毁，对象消亡
            总结：单例对象的生命周期和容器相同
        多例对象：
            出生：当使用对象时spring框架为我们创建
            活着：对象只要是在使用过程中就一直活着。
            死亡：当对象长时间不用，且没有别的对象引用时，垃圾回收机制会回收对象
    -->
    <bean id="accountService" class="com.minghai.service.impl.AccountServiceImpl" scope="singleton"
          init-method="init" destroy-method="destory"> </bean>

</beans>
